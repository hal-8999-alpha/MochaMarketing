import pinecone
from dotenv import load_dotenv
import os
import sys
import json




def get_calendar(api_key, environment, index_name, Id, Type, CalendarId=None):
    import time
    import openai

    openai.api_key = os.getenv("OPENAI_API_KEY")

    full_text = f"A heartwarming story from one of our recent events: We catered a beautiful outdoor wedding, and the bride's grandmother couldn't make it to the venue. Our barista went the extra mile and personally delivered her favorite cappuccino to her nearby residence. At Aviator Coffee Co., we put people first and believe in spreading love and joy" 

    while True:
        try:
            embedded_text = openai.Embedding.create(
                input=full_text,
                model="text-embedding-ada-002"
            )
            break
        except openai.error.RateLimitError as e:
            print(e)
            print("Waiting before retrying...")
            time.sleep(5)
    
    
    pinecone.init(api_key=api_key, environment=environment)

    # Connect to the index
    index = pinecone.Index(index_name=index_name)
    
    
    # Define the query vector (you may need to adjust the dimension and values)
    query_vector = embedded_text['data'][0]['embedding']

    query_result = index.query(
        vector=query_vector,
        # filter={'$and': [
        #     {'Id': {'$eq': Id}},
        #     {'Type': {'$eq': Type}},
        #     # {'Calendar Id': {'$eq': CalendarId}},
        #     # {'Active': {'$eq': 'Yes'}},
        #     # {'Approved': {'$eq': 'Yes'}}
        # ]},
        top_k=10,
        include_metadata=True
    )

    # Convert the query_result to a dictionary format
    query_result_dict = {
        "namespace": query_result.namespace,
        "matches": [
            {
                "id": match.id,
                "score": match.score,
                "values": match.values,
                "metadata": match.metadata
            }
            for match in query_result.matches
        ],
    }

    # Convert the query_result_dict to a JSON format
    # json_data = json.dumps(query_result_dict)

    print(query_result)



if __name__ == "__main__":
    # Pass In a business Id
    load_dotenv()

    api_key = os.getenv("MOCHA_PINECONE_API_KEY")
    environment = os.getenv("MOCHA_PINECONE_API_ENV")
    index_name = os.getenv("MOCHA_PINECONE_API_INDEX")

    Id = "MooseCoffeeCo640656"
    # CalendarId = "LakaJava304133_month_392389"
    Type = "Day"
    get_calendar(api_key, environment, index_name, Id, Type)